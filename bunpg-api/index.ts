import { Elysia, t } from 'elysia'
import { swagger } from '@elysiajs/swagger'
import { DefaultAzureCredential } from "@azure/identity";

import { SQL } from "bun";


const app = new Elysia()
    // host/swagger/json
    .use(swagger({
        documentation: {
            info: {
                title: 'Bun Finance API',
                version: '1.0.0'
            },
            tags: [
                { name: 'Entitlement', description: 'Entitlement endpoints' },
                { name: 'Instruments', description: 'Instruments endpoints' }
            ]
        }
    }))
	.get('/role', () => ['Financial', 'Realtime'], {
        response: t.Array(
			t.String()
		),
        detail: {
            tags: ['Entitlement']
        }
    })
    .get('/ticks/:venue', async ({ params }) => {
        
        const ret = await sql`SELECT * FROM ticks WHERE venue = ${params.venue}`
        console.log(ret)
        return ret.map((r: any) => ({...r, id: parseInt(r.id) ,price: parseFloat(r.price)}))
        }, {
        params: t.Object({
            venue: t.String()
        }),
        response: t.Array(
            t.Object({
                id: t.Number(),
                venue: t.String(),
                symbol: t.String(),
                price: t.Number({ minimum: 0.0001 })
            })
        ),
        detail: {
            tags: ['Instruments']
        }
    })
    .post('/ticks', async ({ body }) => {
        // 
        // Returning Numeric : https://github.com/oven-sh/bun/issues/17194
        // ${sql(body)} with id field :  https://github.com/oven-sh/bun/issues/16679

        const ret = await sql`INSERT INTO ticks (venue, symbol, price) VALUES (${body.venue}, ${body.symbol}, ${body.price}) RETURNING id`
        //const ret = await sql`INSERT INTO ticks ${sql(body)} RETURNING *`
        return {...ret[0], ...body}
        }, {
        body: t.Object({
            venue: t.String(),
            symbol: t.String(),
            price: t.Number()
        }),
        response: t.Object({
            id: t.String(),
            venue: t.String(),
            symbol: t.String(),
            price: t.Number()
        }),
        detail: {
            tags: ['Instruments']
        }
    })
   

var sql: SQL = null as any

async function main() {

    // Azure SDK clients accept the credential as a parameter
    const credential = new DefaultAzureCredential();

    var accessToken = await credential.getToken("https://ossrdbms-aad.database.windows.net/.default")
    sql = new SQL(`postgres://${process.env.A_PGUSER}:${accessToken.token}@${process.env.A_PGNAME}.postgres.database.azure.com/${process.env.A_PGDATABASE || "postgres"}?sslmode=require`);

    // https://www.postgresql.org/docs/current/datatype-numeric.html#DATATYPE-NUMERIC-DECIMAL
    await sql`CREATE TABLE IF NOT EXISTS ticks (id bigint GENERATED BY DEFAULT AS IDENTITY, venue TEXT, symbol TEXT, price NUMERIC(10,4))`
    app.listen(3000)
    console.log(`ðŸ¦Š Elysia is running at ${app.server?.hostname}:${app.server?.port}`)
}
	
main()

